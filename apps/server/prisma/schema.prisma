generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum FieldType {
  TEXT
  NUMBER
  DATE
  ATTACHMENT
  FORMULA
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  role      Role
  passwordHash String
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  projects  Project[]
  auditLogs AuditLog[]
  viewShares ViewShare[]
}

model Project {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id])
  isAnonymousReadEnabled Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  tables    Table[]

  @@index([ownerId])
}

model Table {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  name      String
  status    Int      @db.SmallInt @default(0)
  isAnonymousReadEnabled Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  fields    Field[]
  records   Record[]
  views     View[]
  attachments Attachment[]

  @@index([projectId, name])
}

model Field {
  id        String   @id @default(uuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  name      String
  type      FieldType
  order     Int
  permissionJson Json?
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  recordsData RecordsData[]

  @@index([tableId, order])
}

model Record {
  id        String   @id @default(uuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  status    Int      @db.SmallInt @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  data      RecordsData[]
  attachments Attachment[]

  @@index([tableId, createdAt])
}

model RecordsData {
  id         String   @id @default(uuid())
  recordId   String
  record     Record   @relation(fields: [recordId], references: [id])
  fieldId    String
  field      Field    @relation(fields: [fieldId], references: [id])
  valueJson  Json?
  valueText  String?
  valueNumber Decimal? @db.Decimal(18, 2)
  valueDate  DateTime? @db.Timestamptz
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz

  @@unique([recordId, fieldId])
  @@index([valueText])
}

model View {
  id        String   @id @default(uuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  name      String
  config    Json
  exportEnabled Boolean @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  shares    ViewShare[]
}

model ViewShare {
  id        String   @id @default(uuid())
  viewId    String
  view      View     @relation(fields: [viewId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([viewId, userId])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  scope     String
  targetId  String?
  detail    Json?
  traceId   String?
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([createdAt])
}

model Attachment {
  id        String   @id @default(uuid())
  tableId   String
  table     Table    @relation(fields: [tableId], references: [id])
  recordId  String?
  record    Record?  @relation(fields: [recordId], references: [id])
  filename  String
  path      String
  mime      String?
  size      Int
  status    Int      @db.SmallInt @default(0)
  scanned   Boolean  @default(false)
  scannedAt DateTime?
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([tableId])
  @@index([recordId])
}